# --- Experiment configurations --------------------------------------------------------------------

# experiment name, used as folder name
experiment_name: LSTM_shared_debugging_runs_check_delay_1


# input and output frequencies
# use_frequencies:
#   - 10min


# files to specify training, validation and test basins (relative to code root or absolute path)
train_basin_file: LSTM_shared_8basins.txt
validation_basin_file: LSTM_shared_8basins.txt
test_basin_file: LSTM_shared_8basins.txt

# training, validation and test time periods (format = 'dd/mm/yyyy')
# train_start_date: "01/10/2010"
# train_end_date: "30/09/2017"
# validation_start_date: "01/10/2017"
# validation_end_date: "30/09/2019"
# test_start_date: "01/10/2019"
# test_end_date: "28/09/2021"

train_start_date: ["07/10/2010", "07/10/2011", "07/10/2012", "07/10/2013", "07/10/2014"]
train_end_date: ["30/05/2011", "30/05/2012", "30/05/2013", "30/05/2014", "30/05/2015"]
validation_start_date: "01/10/2015"
validation_end_date: "30/05/2018"
test_start_date: "01/10/2019"
test_end_date: "28/05/2020"

# which GPU (id) to use [in format of cuda:0, cuda:1 etc, or cpu or None]
device: cpu

# --- Validation configuration ---------------------------------------------------------------------

# specify after how many epochs to perform validation
validate_every: 1

# specify how many random basins to use for validation
validate_n_random_basins: 0

# specify which metrics to calculate during validation (see neuralhydrology.evaluation.metrics)
# this can either be a list or a dictionary. If a dictionary is used, the inner keys must match the name of the
# target_variable specified below. Using dicts allows for different metrics per target variable.
metrics:
  - NSE

# --- Model configuration --------------------------------------------------------------------------

# base model type [lstm, ealstm, cudalstm, embcudalstm, mtslstm]
# (has to match the if statement in modelzoo/__init__.py)
model: arlstm

# prediction head [regression]. Define the head specific parameters below
head: regression

# ----> Regression settings <----
output_activation: linear

# ----> General settings <----

# Number of cell states of the LSTM
hidden_size: 20

# Initial bias value of the forget gate
initial_forget_bias: 3

# Dropout applied to the output of the LSTM
output_dropout: 0.4

# --- Training configuration -----------------------------------------------------------------------

# specify optimizer [Adam]
optimizer: Adam

# specify loss [MSE, NSE, RMSE]
loss: MSE

# specify learning rates to use starting at specific epochs (0 is the initial learning rate)
learning_rate:
  0: 5e-3
  20: 1e-3
  25: 1e-4

# Mini-batch size
batch_size: 2048

# Number of training epochs
epochs: 5

# If a value, clips the gradients during training to that norm.
clip_gradient_norm: 1

# Defines which time steps are used to calculate the loss. Can't be larger than seq_length.
# If use_frequencies is used, this needs to be a dict mapping each frequency to a predict_last_n-value, else an int.
predict_last_n: 1

# Length of the input sequence
# If use_frequencies is used, this needs to be a dict mapping each frequency to a seq_length, else an int.
seq_length: 72

# Number of parallel workers used in the data pipeline
num_workers: 0

# Log the training loss every n steps
log_interval: 5

# If true, writes logging results into tensorboard file
log_tensorboard: True

# If a value and greater than 0, logs n random basins as figures during validation
log_n_figures: 1

# Save model weights every n epochs
save_weights_every: 1

# --- Data configurations --------------------------------------------------------------------------

# which data set to use [camels_us, camels_gb, global, hourly_camels_us]
dataset: caravan

# Path to data set root
data_dir: ../../../../data/Caravan

# Forcing product [daymet, maurer, maurer_extended, nldas, nldas_extended, nldas_hourly]
# can be either a list of forcings or a single forcing product
forcings:
    - il
#   - nldas_hourly
#   - daymet

lagged_features:
    Flow_m3_sec: [1]
    Rain_gauge_1: [1]
    Rain_gauge_2: [1]
    Rain_gauge_3: [1]

dynamic_inputs:
    - Rain_gauge_1
    - Rain_gauge_2
    - Rain_gauge_3

autoregressive_inputs:
    - Flow_m3_sec_shift1

# which columns to use as target
target_variables:
  - Flow_m3_sec

# clip negative predictions to zero for all variables listed below. Should be a list, even for single variables.
clip_targets_to_zero:
  - Flow_m3_sec
